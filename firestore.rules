rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidDisplayName(displayName) {
      // Instagram-style validation: 3-30 chars, alphanumeric + underscore + period
      return displayName.size() >= 3
        && displayName.size() <= 30
        && displayName.matches('^[a-zA-Z0-9._]+$')
        && !displayName.matches('^[.].*') // Cannot start with period
        && !displayName.matches('.*[.]$') // Cannot end with period
        && !displayName.matches('.*[.][.].*'); // No consecutive periods
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles (for display purposes)
      allow read: if isAuthenticated();

      // Only the user can create their own profile
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt'])
        && isValidDisplayName(request.resource.data.displayName)
        && request.resource.data.email == request.auth.token.email;

      // Only the user can update their own profile
      allow update: if isOwner(userId)
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'createdAt']))
        && (request.resource.data.displayName == resource.data.displayName
            || isValidDisplayName(request.resource.data.displayName));

      // Only the user can delete their own profile
      allow delete: if isOwner(userId);
    }

    // DisplayNames collection (for uniqueness tracking)
    match /displayNames/{displayName} {
      // Allow unauthenticated reads to check availability during signup
      allow read: if true;

      // Only create if authenticated and claiming for yourself
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && isValidDisplayName(displayName);

      // Can only update your own displayName claim
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;

      // Can only delete your own displayName claim
      allow delete: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
    }

    // Conversations collection (for future use)
    match /conversations/{conversationId} {
      allow read: if isAuthenticated()
        && request.auth.uid in resource.data.participantIds;

      allow create: if isAuthenticated()
        && request.auth.uid in request.resource.data.participantIds;

      allow update: if isAuthenticated()
        && request.auth.uid in resource.data.participantIds;

      allow delete: if false; // Conversations cannot be deleted
    }

    // Block all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
